{"version":3,"sources":["services/WorldBuilder.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["WorldBuilder","worldMessage","maxX","message","maxY","users","Canvas","socket","world","canvasRef","React","createRef","resized","current","width","window","innerWidth","height","innerHeight","canvas","ctx","getContext","beginPath","strokeStyle","incX","i","moveTo","lineTo","stroke","incY","closePath","console","log","drawGrid","handleMessage","parsed","JSON","parse","data","id","user","drawUser","drawUsers","useEffect","addEventListener","onopen","send","onmessage","ref","playerXPosition","position","x","playerYPosition","y","fillStyle","color","fillRect","playerSize","App","WebSocket","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4MAAO,SAASA,EAAaC,GAC3B,MAAO,CACLC,KAAMD,EAAaE,QAAQD,KAC3BE,KAAMH,EAAaE,QAAQC,KAC3BC,MAAOJ,EAAaE,QAAQE,OCDzB,SAASC,EAAOC,GACrB,IAAIC,EAEEC,EAAYC,IAAMC,YAGlBC,EAAU,WACdH,EAAUI,QAAQC,MAAQC,OAAOC,WACjCP,EAAUI,QAAQI,OAASF,OAAOG,YA+BtC,SAAkBC,GAChB,IACMC,EAAMD,EAAOE,WAAW,MAE9BD,EAAIE,YACJF,EAAIG,YAAc,UAElB,IADA,IAAMC,EAAOL,EAAOL,MALH,GAMRW,EAAI,EAAGA,GAAKN,EAAOL,MAAOW,GAAKD,EACtCJ,EAAIM,OAAOD,EAAG,GACdL,EAAIO,OAAOF,EAAGN,EAAOF,QACrBG,EAAIQ,SAGN,IADA,IAAMC,EAAOV,EAAOF,OAXH,GAYRQ,EAAI,EAAGA,GAAKN,EAAOF,OAAQQ,GAAKI,EACvCT,EAAIM,OAAO,EAAGD,GACdL,EAAIO,OAAOR,EAAOL,MAAOW,GACzBL,EAAIQ,SAENR,EAAIU,YACJC,QAAQC,IAAI,QAjDVC,CAASxB,EAAUI,UAGfqB,EAAgB,SAAC/B,GACrB,IAAIgC,EAASC,KAAKC,MAAMlC,EAAQmC,MACf,UAAdH,EAAOI,KACR/B,EAAQR,EAAamC,GA8C3B,SAAmBhB,EAAQX,GACzB,IAAMY,EAAMD,EAAOE,WAAW,MAI9B,IAAI,IAAImB,KAAQhC,EAAMH,MACpBoC,EAASrB,EAAKZ,EAAOgC,GAoBvBT,QAAQC,IAAI,0BAvERU,CAAUjC,EAAUI,QAASL,KAiBjC,OAbAE,IAAMiC,WAAU,WACd/B,IACAG,OAAO6B,iBAAiB,SAAUhC,GAClCL,EAAOsC,OAAS,WACdtC,EAAOuC,KAAK,qCAEdvC,EAAOwC,UAAY,SAAC5C,GAClB+B,EAAc/B,OAMX,yBAAKoC,GAAG,WACb,4BAAQS,IAAKvC,KAwDjB,SAASgC,EAASrB,EAAKZ,EAAOgC,GAM5BpB,EAAIE,YACJ,IAAI2B,EAAmBzC,EAAMH,MAAMmC,GAAMU,SAASC,EAAI3C,EAAMN,KAAQa,OAAOC,WACvEoC,EAAmB5C,EAAMH,MAAMmC,GAAMU,SAASG,EAAI7C,EAAMJ,KAAQW,OAAOG,YAC3EE,EAAIkC,UAAY9C,EAAMH,MAAMmC,GAAMe,MAClCxB,QAAQC,IAAIoB,GACZhC,EAAIoC,SAASP,EAAmBQ,GAAiBL,EAAmBK,GAPjD,OAQnBrC,EAAIQ,SACJR,EAAIU,YCpGS4B,MALf,WAEE,OAAOpD,EADM,IAAIqD,UAAU,0BCUTC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMzE,c","file":"static/js/main.186dd0ab.chunk.js","sourcesContent":["export function WorldBuilder(worldMessage) {\n  return {\n    maxX: worldMessage.message.maxX,\n    maxY: worldMessage.message.maxY,\n    users: worldMessage.message.users\n  }\n}\n\nexport default WorldBuilder;\n","import React from 'react';\nimport { WorldBuilder } from './services/WorldBuilder';\n\nexport function Canvas(socket) {\n  let world;\n\n  const canvasRef = React.createRef();\n  // const playerCanvasRef = React.createRef();\n\n  const resized = () => {\n    canvasRef.current.width = window.innerWidth;\n    canvasRef.current.height = window.innerHeight;\n    drawGrid(canvasRef.current);\n  };\n\n  const handleMessage = (message) =>  {\n    let parsed = JSON.parse(message.data);\n    if(parsed.id === 'world') {\n      world = WorldBuilder(parsed);\n      drawUsers(canvasRef.current, world);\n    }\n  }\n\n  React.useEffect(() => {\n    resized();\n    window.addEventListener(\"resize\", resized);\n    socket.onopen = () => {\n      socket.send('{\"id\": \"move\",\"message\":\"RIGHT\"}');\n    }\n    socket.onmessage = (message) => {\n      handleMessage(message);\n    }\n  });\n\n  \n\n  return <div id=\"wrapper\">\n    <canvas ref={canvasRef}></canvas>\n    {/* <canvas ref={playerCanvasRef}></canvas> */}\n    </div>\n}\n\nfunction drawGrid(canvas) {\n  const cellRows = 10;\n  const ctx = canvas.getContext('2d');\n\n  ctx.beginPath();\n  ctx.strokeStyle = '#FF00FF';\n  const incX = canvas.width / cellRows;\n  for (let i = 0; i <= canvas.width; i += incX) {\n    ctx.moveTo(i, 0);\n    ctx.lineTo(i, canvas.height);\n    ctx.stroke();\n  }\n  const incY = canvas.height / cellRows;\n  for (let i = 0; i <= canvas.height; i += incY) {\n    ctx.moveTo(0, i);\n    ctx.lineTo(canvas.width, i);\n    ctx.stroke();\n  }\n  ctx.closePath();\n  console.log(\"done\");\n}\n\nfunction drawUsers(canvas, world) {\n  const ctx = canvas.getContext('2d');\n  // ctx.moveTo(100, 0);\n  //   ctx.lineTo(100, canvas.height);\n  //   ctx.stroke();\n  for(var user in world.users) {\n    drawUser(ctx, world, user);\n  }\n  // console.log(world.users.[0]);\n\n  // const cellRows = 10;\n  \n\n  \n  // const incX = canvas.width / cellRows;\n  // for (let i = 0; i <= canvas.width; i += incX) {\n  //   ctx.moveTo(i, 0);\n  //   ctx.lineTo(i, canvas.height);\n  //   ctx.stroke();\n  // }\n  // const incY = canvas.height / cellRows;\n  // for (let i = 0; i <= canvas.height; i += incY) {\n  //   ctx.moveTo(0, i);\n  //   ctx.lineTo(canvas.width, i);\n  //   ctx.stroke();\n  // }\n  console.log(\"finished drawing users\");\n}\n\nfunction drawUser(ctx, world, user) {\n  // todo: move this to a better location\n  // left this as a variable so it could\n  // easily be changed in the future\n  const playerSize = 20;\n\n  ctx.beginPath();\n  let playerXPosition = (world.users[user].position.x / world.maxX) * window.innerWidth;\n  let playerYPosition = (world.users[user].position.y / world.maxY) * window.innerHeight;\n  ctx.fillStyle = world.users[user].color;\n  console.log(playerYPosition);\n  ctx.fillRect(playerXPosition - (playerSize / 2), playerYPosition - (playerSize / 2), playerSize, playerSize);\n  ctx.stroke();\n  ctx.closePath();\n}\n","import { Canvas } from './Canvas';\nfunction App() {\n  let socket = new WebSocket('ws://localhost:42069');\n  return Canvas(socket);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}